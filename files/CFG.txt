<START> -> <DEFS> func main ORB CRB OCB <MST> CCB ^

<DEFS> -> <CLASS_DEF> <DEFS>
<DEFS> -> <OBJ_DEF> <DEFS>
<DEFS> -> <ABSTRACT_DEF> <DEFS>
<DEFS> -> <FUNC_DEF> <DEFS>
<DEFS> -> <VAR_DEF> <DEFS>
<DEFS> -> <ARRAY_DEF> <DEFS>
<DEFS> -> E

<VAR_DEF> -> <VAR_TYPE> ID COL <DT> <INIT>
<VAR_TYPE> -> let
<VAR_TYPE> -> const
<INIT> -> ASIGN <CONST> <LIST>
<INIT> -> ASIGN ID <LIST>
<INIT> -> SEMICOL
<LIST> -> SEMICOL
<LIST> -> COM ID <INIT> <LIST>

<DT> -> DT
#<DT> -> string
#<DT> -> bool
#<DT> -> void

#<DT> -> ID

<FUNC_DEF> -> func ID ORB <PARAM> CRB <RETURNS> OCB <MST> CCB

<PARAM> -> ID <PARAM>
<PARAM> -> <DT> <PARAM>
<PARAM> -> E

<OE> -> <AE> <OE'>
<OE'> -> OR <AE> <OE'>
<OE'> -> E
<AE> -> <RE> <AE'>
<AE'> -> AND <RE> <AE'>
<AE'> -> E
<RE> -> <E> <RE'>
<RE'> -> <ROP> <E> <RE'> 
<ROP> -> COMP
<RE'> -> E
<E> -> <T> <E'>
<E'> -> PM <T> <E'>
<E'> -> E
<T> -> <F> <T'>
<T'> -> MDM <F> <T'>
<T'> -> E
<F> -> ID <F'>
<F> -> <CONST>
<F> -> <INC_DEC>
<F'> -> E
<F'> -> <INC_DEC>

<CONSTRUCTOR> -> constructor ORB <PARAM> CRB OCB <MST> CCB

<CONST> -> NUM
<CONST> -> SC

<BODY> -> <SST>
<BODY> -> <MST>
<BODY> -> E

<MST> -> <SST> <MST>
<MST> -> E

#<MST1> -> <SST> <MST2>
#<MST2> -> <SST> <MST3>
#<MST3> -> E
#<MST> -> E
#<MST1> -> E

<SST> -> <WHILE_ST>
<SST> -> <FOR_ST>
<SST> -> <DO_WHILE_ST>
<SST> -> <IF_ELSE_ST>
<SST> -> <VAR_DEF>
<SST> -> <INC_DEC>
<SST> -> <FUNC_DEF>
<SST> -> <ARRAY_DEF>
<SST> -> <RETURN>
<SST> -> <CONSTRUCTOR>
#<SST> -> <CURRENT>
#<SST> -> <PARENT>

<CURRENT> -> current.

<PARENT> -> parent.

<INC_DEC> -> <INC_DEC_BODY> <CURRENT> ID SEMICOL
#<LHP>
<INC_DEC_BODY> -> ++
<INC_DEC_BODY> -> --

<INHERITANCE> -> EXT ID <INHERITANCE>
<INHERITANCE> -> E

<ASSIGN_ST> -> <CURRENT> ID <INIT> <LIST>
<ASSIGN_OP> -> ASIGN
<ASSIGN_OP> -> COMP
#<ARITH_ASSIGN> -> +=
#<ARITH_ASSIGN> -> -=
#<ARITH_ASSIGN> -> *=
#<ARITH_ASSIGN> -> /=

<ARRAY_DEF> -> <VAR_TYPE> ID COL <DT> OSB CSB SEMICOL
#<ARR> -> OSB <ARR> CSB
#<ARR> -> <OE>

#<ACC_MOD> -> scoped
#<ACC_MOD> -> protected
<ACC_MOD> -> avail
<ACC_MOD> -> AM
<ACC_MOD> -> E

<FOR_ST> -> for ORB <S1> <S2> SEMICOL <S3> CRB OCB <BODY> CCB 
<S1> -> <VAR_DEF>
<S1> -> <ASSIGN_ST> SEMICOL
<S1> -> SEMICOL
<S2> -> <OE>
<S2> -> E
<S3> -> ID
<S3> -> <INC_DEC> ID
<S3> -> E

<WHILE_ST> -> while ORB <OE> CRB OCB <BODY> CCB

<DO_WHILE_ST> -> do OCB <BODY> CCB while ORB <OE> CRB SEMICOL

<IF_ELSE_ST> -> if ORB <OE> CRB OCB <BODY> CCB <ELSE>
<ELSE> -> else OCB <BODY> CCB

<OBJ_DEF> -> new ID ORB <OE> CRB SEMICOL

<RETURNS> -> returns ORB DT CRB
<RETURNS_DT> -> <DT>
#<RETURNS_DT> -> array
#<RETURNS_DT> -> E

<RETURN> -> return <RETURN_TYPE> SEMICOL
<RETURN_TYPE> -> DT
<RETURN_TYPE> -> ID

<ABSTRACT_DEF> -> abstract ID OCB <ABS_BODY> CCB
<ABS_BODY> -> <FUNC_DEF> <ABS_BODY> 
<ABS_BODY> -> <DEC>
<ABS_BODY> -> E
<DEC> -> <VAR_DEF> <DEC>
<DEC> -> E

<CLASS_MOD> -> avail
<CLASS_MOD> -> const
<CLASS_MOD> -> abstract
<CLASS_MOD> -> E

<CLASS_DEF> -> <AM> class ID <INHERITANCE_CLASS> OCB <CLASS_BODY> CCB
<AM> -> <ACC_MOD> <CLASS_MOD>
<AM> -> E
<INHERITANCE_CLASS> -> EXT ID <IMPLEMENTS> 
<INHERITANCE_CLASS> -> E
<IMPLEMENTS> -> implements ID
<IMPLEMENTS> -> E
<CLASS_BODY> -> <ACC_MOD> <VAR_DEF> <CLASS_BODY>
<CLASS_BODY> -> <ACC_MOD> <FUNC_DEF> <CLASS_BODY>
<CLASS_BODY> -> <CONSTRUCTOR> <CLASS_BODY>
<CLASS_BODY> -> <BODY>
#<CLASS_BODY> -> E







